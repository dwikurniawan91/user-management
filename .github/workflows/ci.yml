name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment file
        run: |
          echo "VITE_API_URL=${VITE_API_URL:-https://jsonplaceholder.typicode.com/users}" > .env
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: Run unit tests
        run: docker compose run --rm test

      - name: Tear down containers
        if: always()
        run: docker compose down --remove-orphans

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create environment file
        run: |
          echo "VITE_API_URL=${VITE_API_URL:-https://jsonplaceholder.typicode.com/users}" > .env
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: Build production image
        run: docker build --target production -t user-management:latest --build-arg VITE_API_URL="${VITE_API_URL:-https://jsonplaceholder.typicode.com/users}" .
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: Extract static build output
        run: |
          docker build --target build -t user-management:build --build-arg VITE_API_URL="${VITE_API_URL:-https://jsonplaceholder.typicode.com/users}" .
          container_id=$(docker create user-management:build)
          mkdir -p dist
          docker cp "$container_id":/app/dist ./dist
          docker rm "$container_id"
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: error

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Inspect dist contents
        run: ls -R dist

      - name: Skip deployment for pull requests
        if: github.event_name == 'pull_request'
        run: echo "Pull request detected - skipping deployment stage."

      - name: Install Netlify CLI
        if: github.event_name != 'pull_request'
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        if: github.event_name != 'pull_request'
  run: netlify deploy --auth "$NETLIFY_AUTH_TOKEN" --site "$NETLIFY_SITE_ID" --dir=dist --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Remove Docker resources
        run: |
          docker system prune -af || true
          docker volume prune -f || true

      - name: Report cleanup status
        run: echo "Cleanup stage completed."
